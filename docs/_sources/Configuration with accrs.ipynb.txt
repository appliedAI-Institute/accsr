{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# The configuration module\n",
    "\n",
    "accsr provides utilities for reading configuration from a hierarchy of files and customizing access to them. In\n",
    "this notebook we show some use case examples for this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2022-01-31T22:44:20.869903Z",
     "iopub.status.busy": "2022-01-31T22:44:20.869323Z",
     "iopub.status.idle": "2022-01-31T22:44:20.992038Z",
     "shell.execute_reply": "2022-01-31T22:44:20.991426Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "from accsr.config import ConfigProviderBase, DefaultDataConfiguration, ConfigurationBase\n",
    "from accsr.remote_storage import RemoteStorage, RemoteStorageConfig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Setting up configuration\n",
    "\n",
    "The recommended way of using accsr's configuration utils is to create a module called `config.py` within your project\n",
    "and setup classes and methods for managing and providing configuration. In the cell below we show a minimal example\n",
    "of such a file.\n",
    "\n",
    "Under the hood the config provider is reading out the `__Configuration` class from generics at runtime and makes sure\n",
    "that only one global instance of your custom `__Configuration` exists in memory. Don't worry if you are unfamiliar\n",
    "with the coding patterns used here - you don't need to understand them to use the config utils.\n",
    "You will probably never need to adjust the `ConfigProvider` related code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2022-01-31T22:44:20.997963Z",
     "iopub.status.busy": "2022-01-31T22:44:20.996849Z",
     "iopub.status.idle": "2022-01-31T22:44:20.998488Z",
     "shell.execute_reply": "2022-01-31T22:44:20.998854Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "class __Configuration(ConfigurationBase):\n",
    "    pass\n",
    "\n",
    "\n",
    "class ConfigProvider(ConfigProviderBase[__Configuration]):\n",
    "    pass\n",
    "\n",
    "\n",
    "_config_provider = ConfigProvider()\n",
    "\n",
    "\n",
    "def get_config(reload=False) -> __Configuration:\n",
    "    \"\"\"\n",
    "    :param reload: if True, the configuration will be reloaded from the json files\n",
    "    :return: the configuration instance\n",
    "    \"\"\"\n",
    "    return _config_provider.get_config(reload=reload)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2022-01-31T22:44:21.002572Z",
     "iopub.status.busy": "2022-01-31T22:44:21.001595Z",
     "iopub.status.idle": "2022-01-31T22:44:21.003096Z",
     "shell.execute_reply": "2022-01-31T22:44:21.003489Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# TODO: extend notebook\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
